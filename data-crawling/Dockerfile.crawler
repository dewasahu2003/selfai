FROM public.ecr.aws/lambda/python:3.11 as build

RUN yum install -y unzip || { echo "Failed to install unzip"; exit 1; }
RUN curl -Lo "/tmp/chromedriver.zip" "https://storage.googleapis.com/chrome-for-testing-public/126.0.6478.126/linux64/chromedriver-linux64.zip" || { echo "Failed to download chromedriver"; exit 1; }
RUN curl -Lo "/tmp/chrome-linux.zip" "https://storage.googleapis.com/chrome-for-testing-public/126.0.6478.126/linux64/chrome-linux64.zip" || { echo "Failed to download chrome"; exit 1; }
RUN unzip /tmp/chromedriver.zip -d /opt/ || { echo "Failed to unzip chromedriver"; exit 1; }
RUN unzip /tmp/chrome-linux.zip -d /opt/ || { echo "Failed to unzip chrome"; exit 1; }


FROM public.ecr.aws/lambda/python:3.11

RUN yum install -y \
    atk \
    wget \
    git \
    cups-libs \
    gtk3 \
    libXcomposite \
    alsa-lib \
    libXcursor \
    libXdamage \
    libXext \
    libXi \
    libXrandr \
    libXScrnSaver \
    libXtst \
    pango \
    at-spi2-atk \
    libXt \
    xorg-x11-server-Xvfb \
    xorg-x11-xauth \
    dbus-glib \
    dbus-glib-devel \
    nss \
    mesa-libgbm \
    ffmpeg \
    libxext6 \
    libssl-dev \
    libcurl4-openssl-dev \
    libpq-dev

COPY --from=build /opt/chrome-linux64 /opt/chrome
COPY --from=build /opt/chromedriver-linux64 /opt/

COPY ./pyproject.toml ./poetry.lock ./

RUN python -m pip install --upgrade pip && pip install poetry

RUN poetry export -f requirements.txt --output requirements.txt && \
    pip install --no-cache-dir -r requirements.txt --target "${LAMBDA_TASK_ROOT}" && \
    rm requirements.txt pyproject.toml poetry.lock

RUN wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem -P ${LAMBDA_TASK_ROOT}
ENV PYTHONPATH=${LAMBDA_TASK_ROOT}/data-crawling

COPY ./ ${LAMBDA_TASK_ROOT}/data-crawling

CMD ["data-crawling.main.lambda_handler"]

